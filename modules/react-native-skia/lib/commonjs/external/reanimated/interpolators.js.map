{"version":3,"names":["notifyChange","value","_value","useClock","clock","useSharedValue","useFrameCallback","info","timeSinceFirstFrame","useInterpolator","factory","interpolator","input","output","options","init","useMemo","result","useAnimatedReaction","val","usePathInterpolation","outputRange","Skia","Path","Make","interpolatePaths","useVectorInterpolation","Point","interpolateVector"],"sources":["interpolators.ts"],"sourcesContent":["import type { ExtrapolationType, SharedValue } from \"react-native-reanimated\";\nimport { useMemo } from \"react\";\n\nimport type { SkPath, SkPoint } from \"../../skia/types\";\nimport { interpolatePaths, interpolateVector } from \"../../animation\";\nimport { Skia } from \"../../skia\";\n\nimport {\n  useAnimatedReaction,\n  useFrameCallback,\n  useSharedValue,\n} from \"./moduleWrapper\";\n\nexport const notifyChange = (value: SharedValue<unknown>) => {\n  \"worklet\";\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (value as any)._value = value.value;\n};\n\nexport const useClock = () => {\n  const clock = useSharedValue(0);\n  useFrameCallback((info) => {\n    clock.value = info.timeSinceFirstFrame;\n  });\n  return clock;\n};\n\n/**\n * @worklet\n */\ntype Interpolator<T> = (\n  value: number,\n  input: number[],\n  output: T[],\n  options: ExtrapolationType,\n  result: T\n) => T;\n\nconst useInterpolator = <T>(\n  factory: () => T,\n  value: SharedValue<number>,\n  interpolator: Interpolator<T>,\n  input: number[],\n  output: T[],\n  options?: ExtrapolationType\n) => {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const init = useMemo(() => factory(), []);\n  const result = useSharedValue(init);\n  useAnimatedReaction(\n    () => value.value,\n    (val) => {\n      result.value = interpolator(val, input, output, options, result.value);\n      notifyChange(result);\n    },\n    [input, output, options]\n  );\n  return result;\n};\n\nexport const usePathInterpolation = (\n  value: SharedValue<number>,\n  input: number[],\n  outputRange: SkPath[],\n  options?: ExtrapolationType\n) =>\n  useInterpolator(\n    () => Skia.Path.Make(),\n    value,\n    interpolatePaths,\n    input,\n    outputRange,\n    options\n  );\n\nexport const useVectorInterpolation = (\n  value: SharedValue<number>,\n  input: number[],\n  outputRange: SkPoint[],\n  options?: ExtrapolationType\n) =>\n  useInterpolator(\n    () => Skia.Point(0, 0),\n    value,\n    interpolateVector,\n    input,\n    outputRange,\n    options\n  );\n"],"mappings":";;;;;;;AACA;;AAGA;;AACA;;AAEA;;AAMO,MAAMA,YAAY,GAAIC,KAAD,IAAiC;EAC3D,UAD2D,CAE3D;;EACCA,KAAD,CAAeC,MAAf,GAAwBD,KAAK,CAACA,KAA9B;AACD,CAJM;;;;AAMA,MAAME,QAAQ,GAAG,MAAM;EAC5B,MAAMC,KAAK,GAAG,IAAAC,6BAAA,EAAe,CAAf,CAAd;EACA,IAAAC,+BAAA,EAAkBC,IAAD,IAAU;IACzBH,KAAK,CAACH,KAAN,GAAcM,IAAI,CAACC,mBAAnB;EACD,CAFD;EAGA,OAAOJ,KAAP;AACD,CANM;AAQP;AACA;AACA;;;;;AASA,MAAMK,eAAe,GAAG,CACtBC,OADsB,EAEtBT,KAFsB,EAGtBU,YAHsB,EAItBC,KAJsB,EAKtBC,MALsB,EAMtBC,OANsB,KAOnB;EACH;EACA,MAAMC,IAAI,GAAG,IAAAC,cAAA,EAAQ,MAAMN,OAAO,EAArB,EAAyB,EAAzB,CAAb;EACA,MAAMO,MAAM,GAAG,IAAAZ,6BAAA,EAAeU,IAAf,CAAf;EACA,IAAAG,kCAAA,EACE,MAAMjB,KAAK,CAACA,KADd,EAEGkB,GAAD,IAAS;IACPF,MAAM,CAAChB,KAAP,GAAeU,YAAY,CAACQ,GAAD,EAAMP,KAAN,EAAaC,MAAb,EAAqBC,OAArB,EAA8BG,MAAM,CAAChB,KAArC,CAA3B;IACAD,YAAY,CAACiB,MAAD,CAAZ;EACD,CALH,EAME,CAACL,KAAD,EAAQC,MAAR,EAAgBC,OAAhB,CANF;EAQA,OAAOG,MAAP;AACD,CApBD;;AAsBO,MAAMG,oBAAoB,GAAG,CAClCnB,KADkC,EAElCW,KAFkC,EAGlCS,WAHkC,EAIlCP,OAJkC,KAMlCL,eAAe,CACb,MAAMa,UAAA,CAAKC,IAAL,CAAUC,IAAV,EADO,EAEbvB,KAFa,EAGbwB,2BAHa,EAIbb,KAJa,EAKbS,WALa,EAMbP,OANa,CANV;;;;AAeA,MAAMY,sBAAsB,GAAG,CACpCzB,KADoC,EAEpCW,KAFoC,EAGpCS,WAHoC,EAIpCP,OAJoC,KAMpCL,eAAe,CACb,MAAMa,UAAA,CAAKK,KAAL,CAAW,CAAX,EAAc,CAAd,CADO,EAEb1B,KAFa,EAGb2B,4BAHa,EAIbhB,KAJa,EAKbS,WALa,EAMbP,OANa,CANV"}